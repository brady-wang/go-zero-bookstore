// Code generated by goctl. DO NOT EDIT!
// Source: book.proto

//go:generate mockgen -destination ./book_mock.go -package bookclient -source $GOFILE

package bookclient

import (
	"context"

	"bookstore/rpc/book/book"

	"github.com/tal-tech/go-zero/zrpc"
)

type (
	AddRequest          = book.AddRequest
	AddResponse         = book.AddResponse
	QueryByNameRequest  = book.QueryByNameRequest
	QueryByNameResponse = book.QueryByNameResponse
	QueryAllRequest     = book.QueryAllRequest
	QueryAllResponse    = book.QueryAllResponse

	Book interface {
		AddBook(ctx context.Context, in *AddRequest) (*AddResponse, error)
		QueryByName(ctx context.Context, in *QueryByNameRequest) (*QueryByNameResponse, error)
		QueryAll(ctx context.Context, in *QueryAllRequest) (*QueryAllResponse, error)
	}

	defaultBook struct {
		cli zrpc.Client
	}
)

func NewBook(cli zrpc.Client) Book {
	return &defaultBook{
		cli: cli,
	}
}

func (m *defaultBook) AddBook(ctx context.Context, in *AddRequest) (*AddResponse, error) {
	client := book.NewBookClient(m.cli.Conn())
	return client.AddBook(ctx, in)
}

func (m *defaultBook) QueryByName(ctx context.Context, in *QueryByNameRequest) (*QueryByNameResponse, error) {
	client := book.NewBookClient(m.cli.Conn())
	return client.QueryByName(ctx, in)
}

func (m *defaultBook) QueryAll(ctx context.Context, in *QueryAllRequest) (*QueryAllResponse, error) {
	client := book.NewBookClient(m.cli.Conn())
	return client.QueryAll(ctx, in)
}
